// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      Role
  profile   Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  consultationsAsDoctor  Consultation[]  @relation("DoctorConsultations")
  consultationsAsPatient Consultation[]  @relation("PatientConsultations")
  appointmentsAsDoctor   Appointment[]   @relation("DoctorAppointments")
  appointmentsAsPatient  Appointment[]   @relation("PatientAppointments")
  medicalRecords         MedicalRecord[]
  notifications          Notification[]
  prescriptionsAsDoctor  Prescription[]  @relation("DoctorPrescriptions")
  prescriptionsAsPatient Prescription[]  @relation("PatientPrescriptions")
}

model Profile {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  phone     String
  address   String
  language  Language
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
}

model Consultation {
  id          Int      @id @default(autoincrement())
  date        DateTime
  description String
  doctorId    Int
  patientId   Int

  // Relations
  doctor  User @relation("DoctorConsultations", fields: [doctorId], references: [id])
  patient User @relation("PatientConsultations", fields: [patientId], references: [id])
}

model Appointment {
  id        Int               @id @default(autoincrement())
  date      DateTime
  reason    String
  status    AppointmentStatus @default(SCHEDULED)
  doctorId  Int
  patientId Int

  // Relations
  doctor  User @relation("DoctorAppointments", fields: [doctorId], references: [id])
  patient User @relation("PatientAppointments", fields: [patientId], references: [id])
}

model Medication {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  dosage      String

  // Relations
  prescriptions Prescription[]
}

model Prescription {
  id           Int      @id @default(autoincrement())
  date         DateTime
  dosage       String
  duration     String
  medicationId Int
  patientId    Int
  doctorId     Int

  // Relations
  medication Medication @relation(fields: [medicationId], references: [id])
  patient    User       @relation("PatientPrescriptions", fields: [patientId], references: [id])
  doctor     User       @relation("DoctorPrescriptions", fields: [doctorId], references: [id])
}

model MedicalRecord {
  id          Int      @id @default(autoincrement())
  recordType  String
  description String
  date        DateTime
  patientId   Int

  // Relations
  patient User @relation(fields: [patientId], references: [id])
}

model Notification {
  id      Int              @id @default(autoincrement())
  message String
  type    NotificationType
  isRead  Boolean          @default(false)
  userId  Int

  // Relations
  user User @relation(fields: [userId], references: [id])
}

model HealthService {
  id           Int         @id @default(autoincrement())
  name         String
  type         ServiceType
  address      String
  phone        String
  latitude     Float
  longitude    Float
  openingHours String
  services     String // JSON string containing available services
}

model Symptom {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  // Relations
  Diseases SymptomDisease[]
}

model Disease {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  // Relations
  Symptoms SymptomDisease[]
}

model SymptomDisease {
  symptomId Int
  diseaseId Int

  // Relations
  symptom Symptom @relation(fields: [symptomId], references: [id])
  disease Disease @relation(fields: [diseaseId], references: [id])

  @@id([symptomId, diseaseId])
}

model Education {
  id       Int               @id @default(autoincrement())
  title    String
  content  String
  category EducationCategory
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}

enum NotificationType {
  APPOINTMENT_REMINDER
  MEDICATION_REMINDER
  GENERAL
}

enum Language {
  FRENCH
  LOCAL
}

enum ServiceType {
  HOSPITAL
  CLINIC
  PHARMACY
}

enum EducationCategory {
  PREVENTION
  TREATMENT
  NUTRITION
  HYGIENE
}
